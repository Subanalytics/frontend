name: CI/CD - Frontend Service OneClick

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'k8s/**'
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests and go straight to deployment'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Deployment environment'
        required: false
        default: 'analytics'
        type: choice
        options:
          - analytics
          - staging
          - production

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/frontend
  SERVICE_NAME: frontend
  NAMESPACE: analytics

permissions:
  contents: read

jobs:
  # ======================
  # CI Stage - Build & Test
  # ======================
  ci-build-test:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      git-sha: ${{ steps.build-info.outputs.git-sha }}
      should-deploy: ${{ steps.build-info.outputs.should-deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        continue-on-error: true
        run: npm run lint || echo "Linting completed with warnings"

      - name: Run tests
        run: |
          set -e
          if npm run test:coverage 2>/dev/null; then
            echo "✅ Tests with coverage completed"
          elif npm test 2>/dev/null; then
            echo "✅ Tests completed"
          else
            echo "⚠️ No test script found, skipping tests"

      - name: Set build info
        id: build-info
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="${GIT_SHA}-$(date +%s)"
          echo "git-sha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.git-sha }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ======================
  # CD Stage - Deploy to Kubernetes
  # ======================
  cd-deploy:
    runs-on: self-hosted
    needs: ci-build-test
    if: always() && (needs.ci-build-test.result == 'success' || github.event.inputs.skip_tests == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment variables
        run: |
          IMAGE_TAG=${{ github.event.inputs.skip_tests && 'latest' || needs.ci-build-test.outputs.image-tag }}
          GIT_SHA=${{ github.event.inputs.skip_tests && $(git rev-parse --short HEAD) || needs.ci-build-test.outputs.git-sha }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV

          DEPLOY_ENV="${{ github.event.inputs.environment }}"
          echo "NAMESPACE=${DEPLOY_ENV:-analytics}" >> $GITHUB_ENV

      - name: Setup Namespace
        run: |
          if ! kubectl get namespace ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            kubectl create namespace ${{ env.NAMESPACE }}
          fi

      - name: Setup RBAC
        run: |
          kubectl apply -f - <<EOF || echo "Service account already exists"
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: frontend-sa
            namespace: ${{ env.NAMESPACE }}
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: frontend-role
            namespace: ${{ env.NAMESPACE }}
          rules:
          - apiGroups: [""]
            resources: ["services", "pods", "configmaps", "secrets"]
            verbs: ["get", "list", "watch"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: frontend-rolebinding
            namespace: ${{ env.NAMESPACE }}
          subjects:
          - kind: ServiceAccount
            name: frontend-sa
            namespace: ${{ env.NAMESPACE }}
          roleRef:
            kind: Role
            name: frontend-role
            apiGroup: rbac.authorization.k8s.io
          EOF

      - name: Deploy Frontend Service
        run: |
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "Deploying frontend with image: $IMAGE"

          # Use `kubectl apply` safely
          TEMP_DEPLOYMENT=$(mktemp)
          sed "s|image: tush1809/frontend:latest|image: $IMAGE|g" k8s/frontend-deployment.yaml > $TEMP_DEPLOYMENT

          kubectl apply -f $TEMP_DEPLOYMENT -n ${{ env.NAMESPACE }}
          rm $TEMP_DEPLOYMENT

          # Wait for rollout
          kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Verify Deployment
        run: |
          echo "=== Frontend Deployment Status ==="
          kubectl get deployment frontend-deployment -n ${{ env.NAMESPACE }} -o wide
          kubectl get pods -l app=frontend -n ${{ env.NAMESPACE }} -o wide
          kubectl get svc frontend-service -n ${{ env.NAMESPACE }} -o wide
